 image:
   name: hashicorp/terraform:light
   entrypoint:
     - '/usr/bin/env'
     - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
     - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}'
     - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'
     - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
 stages:
   - plan_validate
   - deploy
   - bastion-prep
   - deploy_app
   - destroy_app
   - destroy
 before_script:
   - rm -rf .terraform
   - terraform --version
   - terraform init
 build:
   stage: plan_validate
   script:
     - terraform validate
     - terraform plan
 deploy:
   stage: deploy
   when: manual
   script:
     - terraform apply -auto-approve=true
#create variables BASTION_IP    
     - BASTION_IP=$(terraform output -json bastion_eip | awk -F'[(")]' '{print $2}') >> deploy.env
#output    
     - terraform output kubeconfig 
     - terraform output     
   artifacts:
     reports:
       dotenv: deploy.env

# this stage waiting "Inherit environment variables" development
# https://gitlab.com/gitlab-org/gitlab/-/issues/22638#note_343416057
 bastion-prep:
   stage: bastion-prep
   when: manual
   script:
# add private key to access bastion node             id_rsa
     - BASTION_IP=$(terraform output -json bastion_eip | awk -F'[(")]' '{print $2}') >> deploy.env
     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
     - chmod 600 ~/.ssh/id_rsa
     - eval $(ssh-agent -s)
     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
# wait for bastion node
#    - sleep 200
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo DEBIAN_FRONTEND=noninteractive apt -y update"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo DEBIAN_FRONTEND=noninteractive apt -y install unzip"
# install awscli
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o awscliv2.zip && yes | unzip awscliv2.zip"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo ./aws/install --update"
# configure awscli
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set default.region $AWS_DEFAULT_REGION"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws --version"
# install kubectl
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/linux/amd64/kubectl"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl"
# copy kubeconfig & config_map to bastion node
     - terraform output kubeconfig > kubeconfig && terraform output config_map_aws_auth > config_map_aws_auth.yaml
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "mkdir -p ~/.kube"
     - scp kubeconfig ubuntu@$BASTION_IP:~/.kube/config
     - scp config_map_aws_auth.yaml ubuntu@$BASTION_IP:~/
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sed -i '1d;$d' ~/config_map_aws_auth.yaml"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "grep -v 'EOT' ~/config_map_aws_auth.yaml > ~/1 && mv ~/1 ~/config_map_aws_auth.yaml"     
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sed -i '1d;$d' ~/.kube/config"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "grep -v 'EOT' ~/.kube/config > ~/.kube/1 && mv ~/.kube/1 ~/.kube/config"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl apply -f config_map_aws_auth.yaml"    
# install HELM
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm version --short"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add stable https://charts.helm.sh/stable"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add grafana https://grafana.github.io/helm-charts"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo update"  
# install k9s
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "wget -qO-  https://github.com/derailed/k9s/releases/download/v0.25.18/k9s_Linux_x86_64.tar.gz | tar zxvf -  -C /tmp/"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo mv /tmp/k9s /usr/local/bin"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "export TERM=xterm-256color"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "export K9S_EDITOR=nano"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "export EDITOR=nano"
# create namespace for app
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace grafana --dry-run=client -o yaml | kubectl apply -f -"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace prod --dry-run=client -o yaml | kubectl apply -f -"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace dev --dry-run=client -o yaml | kubectl apply -f -"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace ingress-nginx --dry-run=client -o yaml | kubectl apply -f -"            
#   dependencies:
#     - deploy
 deploy_monitoring_log:
   stage: deploy_app
   when: manual
   script:
      - BASTION_IP=$(terraform output -json bastion_eip | awk -F'[(")]' '{print $2}') 
      - mkdir -p ~/.ssh && chmod 700 ~/.ssh
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      - chmod 600 ~/.ssh/id_rsa
      - eval $(ssh-agent -s)
      - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
# deploy Prometheus
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install prometheus prometheus-community/kube-prometheus-stack --version 32.2.0 --namespace grafana --set prometheus.prometheusSpec.podMonitorSelectorNilUsesHelmValues=false --set prometheus.prometheusSpec.serviceMonitorSelectorNilUsesHelmValues=false --set grafana.enabled=false"
#deploy graphana
      - scp custom-values.yaml ubuntu@$BASTION_IP:~/
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install grafana stable/grafana --set persistence.enabled=true --set adminPassword='$GRAF_PASS' --values custom-values.yaml  --set grafana.serviceName=grafana --set service.type=ClusterIP --namespace grafana --set persistence.storageClassName='gp2'"
#deploy Loki
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install loki grafana/loki --namespace=grafana --set loki.serviceName=loki"
#deploy Promteil
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install promtail grafana/promtail --namespace=grafana"  
#deploy ingress
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install ingress-controller --version 2.3.0 ingress-nginx/ingress-nginx --namespace ingress-nginx --set controller.metrics.enabled=true --set controller.metrics.serviceMonitor.enabled=true --set controller.metrics.serviceMonitor.additionalLabels.release="prometheus""
#attache route53     
      - scp route53.sh ubuntu@$BASTION_IP:~/
#     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "bash route53.sh | exit 0"
#   dependencies:
#     - deploy
 destroy_app:
   stage: destroy_app
   when: manual
   script:
     - BASTION_IP=$(terraform output -json bastion_eip | awk -F'[(")]' '{print $2}')  
     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
     - chmod 600 ~/.ssh/id_rsa
     - eval $(ssh-agent -s)
     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm uninstall prometheus -n grafana"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm uninstall promtail -n grafana"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm uninstall loki -n grafana"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm uninstall grafana -n grafana"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm uninstall ingress-controller --version 2.3.0 ingress-nginx/ingress-nginx --namespace ingress-nginx"
#   dependencies:
#     - deploy 
 destroy:
   stage: destroy
   when: manual
   script:
     - terraform destroy -auto-approve
      
