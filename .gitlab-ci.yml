 image:
   name: hashicorp/terraform:light
   entrypoint:
     - '/usr/bin/env'
     - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
     - 'AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}'
     - 'AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'
     - 'AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'

 stages:
   - plan_validate
   - deploy
   - bastion-prep
   - deploy_app
   - destroy_app
   - destroy

 before_script:
   - rm -rf .terraform
   - terraform --version
   - terraform init

 build:
   stage: plan_validate
   script:
     - terraform validate
     - terraform plan

 deploy:
   stage: deploy
   when: manual
   script:
     - terraform apply -auto-approve=true
#create variables BASTION_IP    
     - BASTION_IP=$(terraform output -json bastion_eip | awk -F'[(")]' '{print $2}') >> deploy.env
#output    
     - terraform output kubeconfig 
     - terraform output     
   artifacts:
     reports:
       dotenv: deploy.env

# this stage waiting "Inherit environment variables" development
# https://gitlab.com/gitlab-org/gitlab/-/issues/22638#note_343416057
 bastion-prep:
   stage: bastion-prep
   when: manual
   script:
# add private key to access bastion node             id_rsa
     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
     - chmod 600 ~/.ssh/id_rsa
     - eval $(ssh-agent -s)
     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
# wait for bastion node
     - sleep 200
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo DEBIAN_FRONTEND=noninteractive apt -y update"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo DEBIAN_FRONTEND=noninteractive apt -y install unzip"
# install awscli
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl 'https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip' -o awscliv2.zip && unzip awscliv2.zip"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sudo ./aws/install"
# configure awscli
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws configure set default.region $AWS_DEFAULT_REGION"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "aws --version"
# install kubectl
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.2/bin/linux/amd64/kubectl"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl"
# copy kubeconfig & config_map to bastion node
     - terraform output kubeconfig > kubeconfig && terraform output config_map_aws_auth > config_map_aws_auth.yaml
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "mkdir -p ~/.kube"

     - scp kubeconfig ubuntu@$BASTION_IP:~/.kube/config
     - scp config_map_aws_auth.yaml ubuntu@$BASTION_IP:~/

     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sed -i '1d;$d' ~/config_map_aws_auth.yaml"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "grep -v 'EOT' ~/config_map_aws_auth.yaml > ~/1 && mv ~/1 ~/config_map_aws_auth.yaml"
     
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "sed -i '1d;$d' ~/.kube/config"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "grep -v 'EOT' ~/.kube/config > ~/.kube/1 && mv ~/.kube/1 ~/.kube/config"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl apply -f config_map_aws_auth.yaml"
    
# install HELM
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm version --short"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add stable https://charts.helm.sh/stable"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo add stable grafana https://grafana.github.io/helm-charts"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm repo update"     
# create namespace for app
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace dev"
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace prod"     
   dependencies:
     - deploy


 deploy_monitoring_log:
   stage: deploy_app
   when: manual
   script:
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "kubectl create namespace monitoring"
# deploy Prometheus
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm install prometheus stable/prometheus --namespace monitoring --set alertmanager.persistentVolume.storageClass='gp2' --set server.persistentVolume.storageClass='gp2'"
#deploy graphana
      - scp grafana.yaml ubuntu@$BASTION_IP:~/
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm install grafana stable/grafana --namespace monitoring --set persistence.storageClassName='gp2' --set persistence.enabled=true --set adminPassword='$GRAF_PASS' --values grafana.yaml --set service.type=CusterIP
#deploy Loki
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install loki grafana/loki --namespace=monitoring "
#deploy Promteil
      - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm upgrade --install promtail grafana/promtail --namespace=monitoring --set loki.serviceName=loki"    

   dependencies:
     - deploy

 destroy_app:
   stage: destroy_app
   when: manual
   script:
     - mkdir -p ~/.ssh && chmod 700 ~/.ssh
     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
     - chmod 600 ~/.ssh/id_rsa
     - eval $(ssh-agent -s)
     - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
     - ssh -T -o "StrictHostKeyChecking no" -l ubuntu $BASTION_IP "helm delete grafana loki promtail prometheus --namespace monitoring"
   dependencies:
     - deploy 

 destroy:
   stage: destroy
   when: manual
   script:
     - terraform destroy -auto-approve
      
